#!/bin/sh
# Copyright (c) 2014, Jeroen de Haas <jeroen@farjmp.nl>
#
# Permission to use, copy, modify, and/or distribute this software for any purpose
# with or without fee is hereby granted, provided that the above copyright notice
# and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
# OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
# TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
# THIS SOFTWARE.

readonly CONFIG_LOCATION=/usr/local/etc/bastille.conf

BASTILLE_USER_CHANGED_JAIL_PATH=""

readonly BASTILLE_OPT_GLOBAL_BASTILLE_DIR='b:'
readonly BASTILLE_OPT_GLOBAL_JAIL_PATH='d:'
readonly BASTILLE_OPT_GLOBAL_MIRROR='m:'
readonly BASTILLE_OPT_GLOBAL_RELEASE='r:'
readonly BASTILLE_OPT_GLOBAL_CONFIG_FILE="c:"
readonly BASTILLE_OPT_CREATE_JAIL_NAME='n:'
readonly BASTILLE_OPT_CREATE_JAIL_HOSTNAME='h:'
readonly BASTILLE_OPT_CREATE_JAIL_EXTRA_PARAMETERS='p:'
readonly BASTILLE_OPT_CREATE_JAIL_IPV4='4:'
readonly BASTILLE_OPT_CREATE_JAIL_IPV6='6:'
readonly BASTILLE_OPT_CREATE_JAIL_TEMPLATE='t:'
readonly BASTILLE_OPT_START_JAIL_NAME='n:'
readonly BASTILLE_OPT_RESTART_JAIL_NAME='n:'
readonly BASTILLE_OPT_STOP_JAIL_NAME='n:'
readonly BASTILLE_OPT_SHELL_JAIL_NAME='n:'
readonly BASTILLE_OPT_SHELL_USER='u:'
readonly BASTILLE_OPT_CREATE_TEMPLATE_NAME='n:'

# all_legal_opts {{{1
# this script echoes a string for use with the getopts builtin, that
# specifies which options are legal. Global options are always legal,
# Additionally all_legal_opts accepts the command given to bastille, 
# in which case the legal options for that command are also output.
all_legal_opts() {
    local command_opts=''
    local cmd=`echo $1 | tr '-' '_'`
    local global_opts=`set | grep BASTILLE_OPT_GLOBAL | sed -E 's/.*=(.*)/\1/g' | tr -d '\n'`
    [ -n "$1" ] &&  command_opts=`set | grep -i BASTILLE_OPT_$cmd | sed -E 's/.*=(.*)/\1/g' | tr -d '\n'`
    echo "${global_opts}${command_opts}"
}

# set_bastille_dir {{{1
# sets the directory in which bastille looks for the base filesystem and
# templates to the first argument
set_bastille_dir() {
    bastille_dir=$1
    set_jail_path "$bastille_dir/jails"
}

# get_bastille_dir {{{1
# echoes the bastille_dir to stdout
get_bastille_dir() {
    echo $bastille_dir
}

# set_jail_path {{{1
# changes the directory in which bastille looks for jails to the first
# argument, unless the function set_jail_path_to_user_value was called
# previously, in which case this function will do nothing.
set_jail_path() {
    [ -z "$BASTILLE_USER_CHANGED_JAIL_PATH" ] && \
        jail_path=$1
}

# set_jail_path_to_user_value {{{1
# calls set_jail_path passing on the first argument. This function should be
# used when a user explicitly sets a jail path. Once this function is called,
# future calls to set_bastille_dir will not change the jail_path
set_jail_path_to_user_value() {
    BASTILLE_USER_CHANGED_JAIL_PATH=''
    set_jail_path $1
    BASTILLE_USER_CHANGED_JAIL_PATH="true"
}

# get_jail_path {{{1
# echoes the jail path to stdout
get_jail_path() {
    echo $jail_path
}

# all_jails_in_jail_path {{{1
# echoes a space separated list of all the jails under $(get_jail_path)
all_jails_in_jail_path() {
    echo $(get_jail_path)/*
}


# get_base_dir {{{1
# echoes the directory in which to look for the base filesystems to stdout
get_base_dir() {
    echo "$(get_bastille_dir)/base"
}

# get_templates_dir {{{1
# echoes the directory in which to look for and store templates
# to stdout
get_templates_dir() {
    echo "$(get_bastille_dir)/templates"
}


# set_mirror {{{1
# sets the mirror used for downloading system components to the first argument
set_mirror() {
    bastille_mirror=$1
}

# get_mirror {{{1
# echoes the mirror used for downloading system components to stdout
get_mirror() {
    echo $bastille_mirror
}

# set_release {{{1
# set the FreeBSD release from which the system components should be fetched, or
# to which the base system should be upgraded (when bastille upgrade is called)
set_release() {
    bastille_freebsd_release=$1
}

# get_release {{{1
# echoes the jails' FreeBSD release version to stdout
get_release() {
    echo $bastille_freebsd_release
}

# get_host_release {{{1
# echoes the version number of the FreeBSD instance that is running on the host. 
# this excludes patch levels
get_host_release() {
    local unamer=`uname -r`
    echo ${unamer%-p*}
}


# set_jail_conf {{{1
# accepts as an argument the path to the configuration file in which to store
# and look for jail definitions
set_jail_conf() {
    bastille_jail_conf=$1
}

# get_jail_conf {{{1
# echoes the path to the jail configuration file 
get_jail_conf() {
    echo $bastille_jail_conf
}
# load configuration and initialize unset variables {{{1
[ -r $CONFIG_LOCATION ] && . $CONFIG_LOCATION


[ -n "$(get_bastille_dir)" ] ||  set_bastille_dir '/usr/local/bastille'
[ -n "$(get_jail_path)" ] || set_jail_path "$bastille_dir/jails"
[ -n "$(get_mirror)" ] || set_mirror 'ftp.freebsd.org'
[ -n "$(get_release)" ] || set_release $(get_host_release)
[ -n "$(get_jail_conf)" ] || set_jail_conf '/etc/jail.conf'


# err {{{1
# echoes 'Error: ' followed by its arguments to stderr and exits
err() {
    echo -e "Error:" $@ 1>&2
    exit 1
}

# warn {{{1
# echoes 'Warning: ' followed by its arguments to stderr but does not exit
warn() {
    echo -e "Warning:" $@ 1>&2
}

# empty_dir {{{1
# returns successfully if its first argument is an empty directory
empty_dir() {
    [ "$#" = 1 ] || err "empty_dir expects one argument"
    [ -z "$(ls -A $1)" ]
}

# definition_for_jail {{{1
# accepts a jail name as its first argument and echoes the definition 
# of the corresponding jail from $(get_jail_conf). 
#
# this function will echo the entire definition as defined in jail.conf(5)
definition_for_jail() {
    [ $# = 1 ] || err "definition_for_jail expects one argument"
    local jail_name=$1
    awk '/'$jail_name'[ ]*\{/, /.*\}.*/' $(get_jail_conf)
}

# parameter_value_for_jail {{{1
# accepts a jail name and a parameter name as its first and second argument
# respectively and echoes to stdout the value of the parameter for that jail,
# as defined in $(get_jail_conf)
parameter_value_for_jail() {
    [ $# = 2 ] || err "parameter_value_for_jail expects two arguments."
    local jail_name=$1
    local parameter=$2

    definition_for_jail $jail_name | grep $parameter | \
        sed -E 's/(.*)=[[:space:]]*"?([^"]*)"?;/\2/g' 
}


# jail_defined {{{1
# accepts a jail name as its argument and returns successfully if 
# the jail with that name is defined
jail_defined() {
    [ $# = 1 ] || err "jail_defined expects one argument."
    definition_for_jail $1 > /dev/null  2>&1
}

# jail_running {{{1
# accepts a jail name as its argument and returns successfully if 
# the jail with that name is running
jail_running() {
    [ $# = 1 ] || err "jail_running expects one argument."
    jls -j $1 > /dev/null 2>&1
}

# dir_for_jail {{{1
# takes as its only argument the name of a jail and returns the directory for
# that jail. If the jail has its path set in $(get_jail_conf), that is returned.
# Otherwise a subdirectory of jail_path with the same name as the jail is
# returned. 
dir_for_jail() {
    [ $# = 1 ] || err "dir_for_jail expects one argument"
    local jail_name=$1

    # awk outputs only the block belonging to the jail
    # grep filters out the path parameter
    # sed outputs the value between quotes to stdout
    local dir_to_jail=$(parameter_value_for_jail $jail_name path)

    # if no match is found, the jail might not have been created
    # in which case we default to a subdirectory with the jail's name
    # inside $jail_path
    if [ $? -gt 0 ] || [ -z "$dir_to_jail" ]; then 
        dir_to_jail=$(get_jail_path)/$jail_name;
    fi

    echo $dir_to_jail
}

# has_jail {{{1
# returns successfull a non-empty directory corresponding

# dir_for_template {{{1
# echoes to stdout the directory in which to look for or place a template
dir_for_template() {
    [ $# = 1 ] || err "dir_for_template expects one argument"
    echo $(get_templates_dir)/$1
}

# dir_for_base_part {{{1
# takes either ro or rw as its first argument and returns the directory in which
# to put or look for the read-only or writable part of the base filesystem
# respectively.
dir_for_base_part() {
    [ $# = 1 ] || err "dir_for_base_part expects one argument"
    echo $(get_base_dir)/$1
}

# get_jail_base_release {{{1
# echoes the jails' base release number to stdout
get_jail_base_release() {
    local fv="$(dir_for_base_part ro)/bin/freebsd-version"
    [ -x "$fv" ] && $fv || err "Could not determine the base jail's release information"
}


# is_valid_label {{{1
# returns successfully if its first argument contains only lower or upper case
# letters in the range a-z, hyphens and decimal digits.
is_valid_label() {
    local label=$1
    [ ${#label} -gt 0 ] && [ ${#label} -lt 64 ] && \
        echo $label | grep -qE '^[a-zA-Z0-9\-]+$'
}

# is_valid_hostname {{{1
# returns successfully if, as its arguments, it is given a number (minimum 1) of
# hostnames that are valid FQDN's. The function will return unsuccessfully if it
# encounters an invalid FQDN, in which case its exit code equals the index of
# the first invalid hostname
is_valid_hostname() {
    [ $# -lt 1 ] && err "is_valid_hostname ($LINENO) expects at least \
        one argument"
    local hname=""
    local n=1
    for hname; do
        # Hostnames may not contain double dots
        case "$hname" in *..*) return $n;; esac
        [ ${#hname} -lt 256 ] || return $n
        for label in $(echo $hname | sed -E 's/\./ /g'); do
            is_valid_label $label || return $n
        done
        n=$(($n+1))
    done
    return 0
}

# is_valid_jailname {{{1
# returns successfully if its first argument does not contain dots, spaces and 
# forward slashes
is_valid_jailname() {
    echo $1 | grep -qv '[\. /]'
}

# hostname_to_jailname {{{1 
# translates a hostname into a jailname by replacing any dots by underscores.
hostname_to_jailname() {
    echo $1 | sed -E 's/\.+/_/g'
}

# is_template {{{1
# returns successfully if its first argument is a directory inside the templates 
# directory. This directory can be empty.
is_template() {
    [ -d "$(get_templates_dir)/$1" ]
}

# is_valid_ipv4_address_list {{{1
# returns successfully if its first argument can be used to set the jail's 
# ipv4.addr parameter
is_valid_ipv4_address_list() {
    # TODO: Implement
    true
}

# is_valid_ipv6_address_list {{{1
# returns successfully if its first argument can jail's ipv6.addr parameter
is_valid_ipv6_address_list() {
    # TODO: Implement
    true
}

# READ_ONLY_DIRS {{{1 
# A space-separated list of directories that belong to the read only part of the
# base jail
readonly READ_ONLY_DIRS="'./COPYRIGHT' \
                         './bin/*' \
                         './boot/*' \
                         './lib/*' \
                         './libexec/*' \
                         './rescue/*' \
                         './sbin/*' \
                         './sys/*' \
                         './usr/bin/*' \
                         './usr/games/*' \
                         './usr/include/*' \
                         './usr/lib/*' \
                         './usr/lib32/*' \
                         './usr/libdata/*' \
                         './usr/libexec/*' \
                         './usr/sbin/*' \
                         './usr/share/*' \
                         './usr/src/*'"

# has_base_part {{{1
# returns successfully if its first argument is a non-empty directory in the 
# base directory
has_base_part() {
    [ "$#" = 1 ] || err "has_base_part expects one argument"
    local target=$(dir_for_base_part $1)
    [ -d "$target" ] && ! empty_dir $target
}

# is_not_prepared {{{1
# Checks if the base directory contains the read-only and writable base
# filesystems
is_not_prepared() {
    ! has_base_part ro || ! has_base_part rw
}

# extract_base {{{1
# takes two arguments:
# 1) the path to an archive containing the base system component (base.txz)
# 2) a string that is either ro or rw indicating whether the read-only or 
#    writable part should be extracted
# 
# Depending on the second argument the READ_ONLY_DIRS are either included or
# excluded when extracting the archive.  The read-only part is extracted to 
# dir_for_base_part ro, the writable part to dir_for_base_part rw.
extract_base() {
    [ "$#" -lt 2 ] && err "extract (${LINENO}): expecting 2 arguments"
    local archive=$1
    local part=$2
    local option=""
    
    case $part in 
        rw)
            option=exclude;;
        ro)
            option=include;;
        *)
            err "extract (${LINENO}): third argument must be 'ro' or 'rw'";;
    esac

    inclusion_pattern=$(for i in $READ_ONLY_DIRS; do 
        pattern=$i
        pattern=${pattern#"'"}
        pattern=${pattern%"'"}
        echo -n "--${option}=$pattern "
    done)
    tar -xpf $archive $inclusion_pattern -C $(dir_for_base_part $part)
}


# chflag_and_rm {{{1
# recursively removes the schg flag from and then deletes the file referenced 
# to by the first argument. The schg flag is set on some files within the base
# filesystem, preventing those on which it is set from being deleted.
chflag_and_rm() {
    [ -d $1 ] || return 0 
    chflags -R noschg $1 &&
        rm -rf $1 > /dev/null 2>&1
}

# clone {{{1
# uses tar(1) to duplicate files from one location to another. 
# clone takes at least three arguments:
# 1) The directory containing the original files
# 2) The path to a file or directory relative to the 
#    source directory to clone. This may be '.' in which
#    case the source directory is cloned recursively
# 3) The destination directory to which the files are cloned
# 
# Optional extra arguments are passed as arguments to tar(1)
# when creating the archive
clone() {
    [ $# -lt 3 ] && err "clone requires at least 3 arguments"
    local from=$1
    local what=$2
    local to=$3
    shift 3
    tar $@ -f - -C $from -c $what | tar -xf - -p -C $to
}

# clone_from_base {{{1
# clones parts of the base filesystem to another directory.
# clone_from_base takes at least three arguments
# 1) The base filesystem part (either ro or rw) to clone from
# 2) The path to a file or directory to clone
# 3) The destination directory
#
# Extra arguments are passed on to the clone function, see its 
# documentation also
clone_from_base() {
    [ $# -lt 3 ] && err "clone_from_base requires at least 3 arguments"
    local part=$1
    has_base_part $part || err "clone_from_base ($LINENO): base part '$part' not installed"

    local from_dir=$(dir_for_base_part $part)
    local what=$2
    local to_dir=$3

    shift 3

    clone $from_dir $what $to_dir $@
}


# clone_from_base_rw {{{1
# clones parts of the writable base filesystem and is implemented
# by calling clone_from_base with the first argument set to rw,
# followed by the arguments with which this function was called
clone_from_base_rw() {
    clone_from_base rw $@
}

# clone_from_base_ro {{{1
# clones parts of the read-only base filesystem and is implemented
# by calling clone_from_base with the first argument set to ro,
# followed by the arguments with which this function was called
clone_from_base_ro() {
    clone_from_base ro $@
}


# merge_template {{{1
# Merges the contents of a template into a jail.
# merge_template takes at least one argument, and an optional second one:
# 1) the jail the template should be merged into
# 2) an optional template name, defaults to 'default'
merge_template() {
    [ $# -lt 1 ] && err "merge_template requires at least one argument"

    local jail_name=$1
    local template_name=${2:-default}

    clone $(dir_for_template $template_name) . $(dir_for_jail $jail_name)
}

# create_template {{{1
# creates a template and populates it with a number of files:
# * etc/localtime which is copied from the host system
# * etc/passwd which is cloned from the read-only base filesystem and then
#   modified to disable password based root logins.
create_template() {
    local template_name=''
    local t_root=''
    local files_to_clone_from_host="etc/resolv.conf etc/localtime"
    local i=''

    cleanup_and_err() {
        [ -d "$t_root" ] && rm -rf $t_root > /dev/null 2>&1
        err $@
    }

    OPTIND=1
    while getopts `all_legal_opts create_template`  arg; do
        case $arg in
            n)
                template_name=$OPTARG
                ;;
        esac
    done

    [ -n "$template_name" ] || usage "create-template"
    t_root=$(dir_for_template $template_name)

    [ -d "$t_root" ] && \
        cleanup_and_err "create_template ($LINENO): Cannot create template \"${template_name}\", $t_root exists"

    mkdir -p $t_root || \
        cleanup_and_err "create_template ($LINENO): Could not create template directory $t_root"

    clone_from_base_rw "etc" $t_root -n || \
        cleanup_and_err "create_template ($LINENO): Could not create etc directory"

    for i in $files_to_clone_from_host; do
        clone "/" "$i" "$t_root" || \
            warn "create_template ($LINENO): Could not copy /$i to template. \
                Remember to adjust this template accordingly."
    done

    clone_from_base_rw "etc/master.passwd" $t_root ||
        cleanup_and_err "create_template ($LINENO): Could not create master.passwd in template"
    # Originally only had  the following line here:
    # sed -E 's/^(root|toor):[^:]*:/\1:*:/g' $t_root/etc/master.passwd  > $t_root/etc/master.passwd
    # but that caused master.passwd to be truncated
    sed -E 's/^(root|toor):[^:]*:/\1:*:/g' $t_root/etc/master.passwd  > $t_root/etc/master.passwd2 || \
        cleanup_and_err "create_template ($LINENO): Could not disable root based password logins for template"
    mv $t_root/etc/master.passwd2 $t_root/etc/master.passwd || \
        cleanup_and_err "create_template ($LINENO): Could not disable root based password logins for template"
}

# create_jail {{{1
create_jail() {

    local jail_name=''
    local jail_template='default'
    local jail_hostname=''
    local jail_ipv4_addr=''
    local jail_ipv6_addr=''
    local jail_components=''
    local jail_extra_parameters=''
    local quiet="false"


    OPTIND=1
    while getopts `all_legal_opts create_jail`  arg; do
        case $arg in
            n)
                jail_name=$OPTARG
                ;;
            t)
                jail_template=$OPTARG
                ;;
            h)
                jail_hostname=$OPTARG
                ;;
            4)
                jail_ipv4_addr=$OPTARG
                ;;
            6)
                jail_ipv6_addr=$OPTARG
                ;;
            p)
                if echo $OPTARG | grep -vqE '^\w+(=[[:alnum:] ]+)?$'; then
                    err "Invalid parameter specification '$OPTARG'.\n\
                        Arguments to -p must be of the form 'parameter[=value]'."
                fi
                [ -n "$jail_extra_parameters" ] && jail_extra_parameters="$jail_extra_parameters\\n"
                jail_extra_parameters="${jail_extra_parameters}$(echo $OPTARG | sed -E 's/=(.*)$/="\1"/g');"
                ;;
            q)
                quiet="true"
                ;;
        esac
    done

    # Validate jail name
    [ -z "$jail_name" ] && usage "create-jail"
    #is_valid_jailname $jailname || \
        #err "$jail_name is not a valid jailname"

    # Validate hostname
    [ -z "$jail_hostname" ] && warn 'No hostname given, using jailname' && \
        : ${jail_hostname:=$jail_name}
    is_valid_hostname $jail_hostname || \
        err "$jail_hostname is not a valid hostname"

    # Validate template
    : ${jail_template:='default'}
    is_template $jail_template || \
        err "Could not find a template named '$jail_template'"

    # Validate IP addresses
    is_valid_ipv4_address_list $jail_ipv4_addr || \
        err "'$jail_ipv4_addr' is not a valid address list"
    is_valid_ipv6_address_list $jail_ipv6_addr || \
        err "'$jail_ipv6_addr' is not a valid address list"


    cat <<EOF
About to create a jail:
    name:           $jail_name
    hostname:       $jail_hostname
    template:       $jail_template
    jail_ipv4_addr: $jail_ipv4_addr
    jail_ipv6_addr: $jail_ipv6_addr
Extra parameters:
$(echo -e $jail_extra_parameters | sed 's/^/    /g')
EOF

    local dest_dir=$(dir_for_jail $jail_name)
    local target=""
    local ro_dir=""
    
    cleanup_and_err() {
        rm -rf $dest_dir > /dev/null 2>&1
        err $@
    }

    say() {
        $quiet || echo $@
    }

    [ -d "$dest_dir" ] && \
        err "create_jail ($LINENO): Cannot create a jail named \"${jail_name}\", $dest_dir exists"


    say "Initializing read only filesystem..."
    mkdir -p $dest_dir/ro
    # Ensure that usr in our new jail has the same permissions as usr in base-ro
    # The -n option forces tar to operate non-recursively, i.e. to only copy the
    # usr directory, not its contents
    clone_from_base_ro usr $dest_dir -n || \
        err "create_jail ($LINENO): Error while cloning the usr \
            directory."
    
    for ro_dir in $READ_ONLY_DIRS; do
        target=$(echo $ro_dir | sed -E $'s/^\'\\.\\/(.*)\'$/\\1/g')
        target=${target%'/*'}
        echo "Linking $target"
        ln -s /ro/$target $dest_dir/$target ||
            cleanup_and_err "Could not create link $target in jail's filesystem"
    done

    say "Initializing writable filesystem..."
    clone_from_base_rw . $dest_dir || \
        cleanup_and_err "create_jail ($LINENO): Error while cloning \
            writable filesystem."

    # Finally merge template
    say "Merging template '$jail_template' with writable filesystem..."
    merge_template $jail_name $jail_template

    # write config
    local jail_conf=$(get_jail_conf)
    say "Writing configuration to ${jail_conf}..."
    cat >> ${jail_conf} <<EOF
$jail_name {
    host.hostname="$jail_hostname";
    mount="$(dir_for_base_part ro) $dest_dir/ro nullfs ro 0 0";
    ip4.addr="$jail_ipv4_addr";
    ip6.addr="$jail_ipv6_addr";
    exec.start="/bin/sh /etc/rc";
    exec.stop="/bin/sh /etc/rc.shutdown";
    mount.devfs;
    exec.clean;
    path="$dest_dir";
$(echo -e $jail_extra_parameters | sed 's/^/    /g')
}
EOF
    say "Jail '$jail_name' succcessfully created."
}

# control_jail {{{1
# starts, stops or restarts the jail referred to using the -n command line option
control_jail() {
    local jail_name=''
    local command=''

    for command; do :; done

    OPTIND=1
    while getopts $(all_legal_opts "start_jail") arg; do
        case $arg in 
            n)
                jail_name=$OPTARG
                ;;
        esac
    done

    [ -n "$jail_name" ] || err "control_jail ($LINENO): No jail name provided. Did you specify \
        an argument to the -n option?"
    
    local operation='-rc'
    local message='Restarting'
    case $command in
        start)
            jail_running $jail_name && err "control_jail ($LINENO): $jail_name already running."
            jail_defined $jail_name || err "control_jail ($LINENO): $jail_name not defined. \
                Did you forget to create-jail?"
            operation='-c'
            message='Starting'
            ;;

        stop)
            jail_running $jail_name || err "control_jail ($LINENO): $jail_name not running."
            operation='-r'
            message='Stopping'
            ;;
        restart)
            jail_running $jail_name || err "control_jail ($LINENO): $jail_name not running."
            ;;
    esac

    echo "$message $jail_name"
    jail $operation $jail_name
    echo -e "Done!\n\n"
    warn "$message jails via $(basename $0) is deprecated, use the following command \
        instead:\n# jail $operation $jail_name"
}

# start_jail {{{1
# start the jail with the name specified with the -n option
start_jail() {
    control_jail "$@" start
}

# stop_jail {{{1
# stop the jail with the name specified with the -n option
stop_jail() {
    control_jail "$@" stop
}
# restart_jail {{{1
# restart the jail with the name specified with the -n option
restart_jail() {
    control_jail "$@" restart
}

# shell {{{1
# opens a shell session in a specific jail
shell() {
    local jail_name=''
    local user='root'

    while getopts `all_legal_opts shell` arg; do
        case $arg in
            n)
                jail_name=$OPTARG
                ;;
            u)
                user=$OPTARG
                ;;
        esac
    done

    [ -n "$jail_name" ] || err "shell ($LINENO): No jail name provided. Did you specify \
        an argument to the -n option?"

    local passwd_line=$(grep -E "^$user" $(dir_for_jail $jail_name)/etc/passwd)
    [ -n "$passwd_line" ] || err "shell ($LINENO): User $user is unknown in jail $jail_name"
    local user_shell=${passwd_line##*:}
    jexec -U $user $jail_name $user_shell
}
# fetch_component {{{1
# uses fetch(1) to download a system component to a specific directory
# fetch_component takes two arguments
#   1) the system component (base, doc, src, ports, lib32, games or kernel)
#   2) the directory to which to download the system component
# the files are fetched via ftp from the mirror set by the user
fetch_component() {
    local mirror="ftp://$(get_mirror)/pub/FreeBSD/releases/$(uname -m)/$(get_release)"
    fetch "$mirror/${1}.txz" -o "$2/${1}.txz"
}

# add_component {{{1
# add_component installs one system component specified by its first argument into the
# read-only base filesystem. 
add_component() {
    local component=$1
    local tmp_dir=""

    cleanup() {
        [ -n "$tmp_dir" ] && [ -d "$tmp_dir" ] && rm -rf $tmp_dir > /dev/null 2>&1
    }

    cleanup_and_err() {
        cleanup
        err $@
    }

    case "$component" in
        doc|games|ports|src) 
            ;;
        lib32)
            [ `uname -m` = 'amd64' ] || err "lib32 is only available on amd64"
            ;;
        base) 
            add_base_component 
            return $?
            ;;
        *)
            err "unknown component: '$component'"
            ;;
    esac

    tmp_dir=$(mktemp -d)
    [ $? -gt 0 ] && err "add_component ($LINENO): could not create temporary directory"
    
    fetch_component $component $tmp_dir || \
        cleanup_and_err "add_component ($LINENO): could not download component '$component'"

    echo "Extracting $component"
    tar -xf "${tmp_dir}/${component}.txz" -C $(dir_for_base_part ro) || \
        cleanup_and_err "add_component ($LINENO): error while extracting ${component}"

    cleanup
    echo "Finished adding component '$component'"
}

# add_components {{{1
# takes any number of components as its arguments and installs them into the
# read only base filesystem
add_components() {
    for component; do
        add_component $component
    done
}



# prepare {{{1
# prepares the system for running jails. It fetches the base system component archive, 
# splits its contents into a read-only part and a writable part and installs them into
# the ro and rw base directories respectively. 
# 
# It then proceeds by creating a default template for new jails
prepare() {
    local tmp_dir=""
    local local_dir=''
    local files='base'
    
    cleanup() {
        [ -d "$tmp_dir" ] && rm -rf $tmp_dir > /dev/null 2>&1
    }

    cleanup_and_err() {
        cleanup
        for i in rw ro; do
            j=$(dir_for_base_part $i)
            [ -d "$j" ] && chflag_and_rm $j
        done
        err $@
    }
cat <<-EOF
About to install a base filesystem for bastille
    base directory:         $(get_base_dir)
    templates directory:    $(get_templates_dir)
    release:                $(get_release)
    mirror:                 $(get_mirror)
EOF

    for p in ro rw; do
        has_base_part $p && \
            err "Read only base filesystem already exists at $(dir_for_base_part $p)"
    done

    for p in ro rw; do
        mkdir -p $(dir_for_base_part $p) || \
            cleanup_and_err "Error while creating $checkdir"
    done

    echo "Downloading distribution archives... "
    tmp_dir=$(mktemp -d)
    for file in $files; do
        fetch_component 'base' $tmp_dir || \
            cleanup_and_err "Error while fetching ${file}.txz"
    done

    echo "Extracting base jail... " 
    for file in $files; do
        for p in ro rw; do
            extract_base ${tmp_dir}/${file}.txz $p || \
                cleanup_and_err "Error while extracting ${tmp_dir}/${file}"
        done
    done

    echo "Creating default template... "
    create_template -n default

    echo "Cleaning up... "
    cleanup
    echo "Successfully prepared bastille for use"
}


# jail_freebsd_update {{{1
jail_freebsd_update() {
    [ "$#" = 1 ] || err "jail_freebsd_update expects one argument"


    local initial_command=$1;
    local echo_command=$1; [ "$initial_command" = "fetch" ] && echo_command="update"
    local log_file="/var/log/bastille-$echo_command"
    local target=""
    local cycles=0
    local target_i=0
    local jail_base_release=$(get_jail_base_release)
    # only pass an -r argument to freebsd-update if initial_command is upgrade
    local to_release=''; [ "$initial_command" = "upgrade" ] && to_release="-r $(get_release)"


    cleanup() {
    }

    cleanup_and_err() {
        err $@
    }

    : > $log_file
    for target in $(dir_for_base_part ro) $(dir_for_base_part rw) $(all_jails_in_jail_path); do
        echo ''
        echo -n "${echo_command%'e'}ing $(basename $target)"
        [ -d "$target" ] || continue;
        echo -n '.'
        UNAME_r="$jail_base_release" PAGER=cat freebsd-update $initial_command -b $target $to_release > $log_file 2>&1 
        if [ "$?" -gt 0 ]; then
            cat $log_file 1>&2
            cleanup_and_err "jail_freebsd_update ($LINENO): Error while fetching ${echo_command}"
        fi

        cycles=0
        while [ $? -eq 0 ]; do
            cycles=$(($cycles+1))
            echo -n '.'
            PAGER=cat freebsd-update install -b $target > $log_file 2>&1
        done
    done
    echo ' done'

    if [ $cycles -gt 1 ]; then # We need to update the individual jails as well for changes in configuration files
        # TODO: Update individual jails
        warn "Do not forget to $echo_command the individual jails, to ensure the configuration \
            files are up to date"
    fi

    cleanup
}


# upgrade {{{1
# upgrade upgrades the base filesystem to a new release level. 
# It determines the release level of the base filesystem by running the
# freebsd-version script inside ro/bin and then upgrades from that level
# to the one specified by the -r option.
upgrade() {
    jail_freebsd_update upgrade
}

# update {{{1
update() {
    jail_freebsd_update fetch
}

# usage {{{1
# outputs instructions on how to use bastille to stdout
usage() {
    local cmd=${1:-'command'}
    cat <<EOF
Usage: `basename $0` [options] $cmd

Global options:
    -${BASTILLE_OPT_GLOBAL_BASTILLE_DIR%:} bastille-dir     -- Directory where to put and look for the jail base filesystem 
                           and templates (default: /usr/local/bastille)
    -${BASTILLE_OPT_GLOBAL_JAIL_PATH%:} jails-dir        -- Directory where to put and look for jails
                           (default: /usr/local/bastille/jails)
    -${BASTILLE_OPT_GLOBAL_CONFIG_FILE%:} config-file      -- Store and look for jail definitions in config-file 
                           (default: /etc/jail.conf
    -${BASTILLE_OPT_GLOBAL_RELEASE%:} release          -- Release level of which to download the system components (when 
                           used with prepare) or to which to upgrade the jail base filesystem 
                           (when used with upgrade). Defaults to the release level of the host 
                           system
    -${BASTILLE_OPT_GLOBAL_MIRROR%:} mirror           -- Mirror from which to download system components.
EOF
[ "$cmd" = 'command' ] && cat <<EOF

Commands:
    add-components      -- Install additional system components into the base
                           jail filesystem. 
    create-jail         -- Create a new jail
    create-template     -- Create a new template
    prepare             -- Install the base jail filesystem and templates to 
                           bastille-dir
    shell               -- Starts a shell inside the jail
    update              -- Update the base jail to the latest patch level
    upgrade             -- Upgrade the base jail filesystem to a newer release,
                           using freebsd-update(8)
    usage               -- Display this message
EOF
[ "$cmd" != 'command' ] && cat <<EOF

Command options:
EOF
[ "$cmd" = 'create-template' ] && cat<<EOF
    -n name             -- Name of the template to create (Required)
EOF
[ "$cmd" = 'create-jail' ] && cat <<EOF
    -n name             -- Name of the new jail (Required)
    -h hostname         -- Hostname of the new jail, defaults to the name of the jail
    -t template         -- Template on which to base the new jail, defaults to 'default'
    -4 [x.x.x.x[,...]]  -- A list of IPv4 address with which to associate the new jail
    -6 [ipv6[,...]]     -- A list of IPv6 address with which to associate the new jail
EOF
    exit ${2:-0}
}
# }}}1

if [ "$#" -lt 1 ]; then
    usage
fi

# The command should be the last argument given to this script
command=""
for command; do :; done

case "$command" in
    prepare|usage) ;;
    create-jail|start-jail|stop-jail|restart-jail|shell|create-template|add-components|upgrade|update)
        if is_not_prepared; then
            err "Could not find the base filesystem for jails. Did you run '`basename $0` prepare'?"
        fi
        ;;
    *)
        warn "Unknown command: $command"
        command='usage'
esac


# Parse global options first
OPTIND=1
while getopts `all_legal_opts $command` arg; do
    case $arg in
        "?") usage $command 1;;
        "${BASTILLE_OPT_GLOBAL_JAIL_PATH%':'}") set_jail_path_to_user_value $OPTARG;;
        "${BASTILLE_OPT_GLOBAL_BASTILLE_DIR%':'}") set_bastille_dir $OPTARG;;
        "${BASTILLE_OPT_GLOBAL_RELEASE%':'}") set_release $OPTARG ;;
        "${BASTILLE_OPT_GLOBAL_MIRROR%':'}") set_mirror $OPTARG;;
        "${BASTILLE_OPT_GLOBAL_CONFIG_FILE%':'}") set_jail_conf $OPTARG;;
    esac
done



case $command in
    "prepare")
        prepare "$@"
        ;;
    "create-jail")
        create_jail "$@"
        ;;
    "start-jail")
        start_jail "$@"
        ;;
    "restart-jail")
        restart_jail "$@"
        ;;
    "stop-jail")
        stop_jail "$@"
        ;;
    "shell")
        shell "$@"
        ;;
    "create-template")
        create_template "$@"
        ;;
    "add-components")
        add_components "$@"
        ;;
    "upgrade")
        upgrade "$@"
        ;;
    "update")
        update "$@"
        ;;
    "usage")
        usage
        ;;
    *)
        usage
        ;;
esac
# vim:ts=4:sts=4:et:sw=4:foldmethod=marker:foldlevel=0
